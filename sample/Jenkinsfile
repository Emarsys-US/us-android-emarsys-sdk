@Library(['android-pipeline', 'general-pipeline']) _

properties([
        parameters([
                booleanParam(
                        name: 'DEVELOPMENT_MODE',
                        description: 'Use local sdk module as dependency',
                        defaultValue: true)])])

node('master') {
    def envs = params.DEVELOPMENT_MODE ? ['DEVELOPMENT_MODE=true'] : []

    withEnv(envs) {
        timeout(15) {
            withSlack channel: 'jenkins', {
                stage("init") {
                    deleteDir()
                    deviceCount shouldBe: env.ANDROID_DEVICE_COUNT, action: { devices, message ->
                        slackMessage channel: 'jenkins', text: message
                    }
                    git url: 'git@github.com:emartech/android-emarsys-sdk.git', branch: 'master'

                    def javaTestFileCount = sh(returnStdout: true, script: 'find . -name  "*Test.java" | wc -l').trim() as Integer
                    def kotlinTestFileCount = sh(returnStdout: true, script: 'find . -name  "*Test.kt" | wc -l').trim() as Integer
                    def javaTimeoutRuleCount = sh(returnStdout: true, script: 'grep -r "^\\s*public TestRule timeout = TimeoutUtils.getTimeoutRule();" . | wc -l').trim() as Integer
                    def kotlinTimeoutRuleCount = sh(returnStdout: true, script: 'grep -r "^\\s*val timeout: TestRule = TimeoutUtils.timeoutRule" . | wc -l').trim() as Integer

                    if (javaTestFileCount != javaTimeoutRuleCount) {
                        error("$javaTestFileCount java tests found, but only $javaTimeoutRuleCount timeout rules!")
                    }
                    if (kotlinTestFileCount != kotlinTimeoutRuleCount) {
                        error("$javaTestFileCount kotlin tests found, but only $kotlinTimeoutRuleCount timeout rules!")
                    }
                }

                stage("build") {
                    androidBuild module: 'sample', andArchive: 'sample/**/apk/**/*.apk'
                }

                stage('lint') {
                    androidLint module: 'sample', andArchive: 'sample/**/lint-results*.*'
                }

                stage("install") {
                    sh './gradlew sample:installDebug'
                }

                stage('Deploy APK to Amazon S3') {
                    sh env.AWS_DEPLOY_COMMAND
                }
            }
        }
    }
}